@model PSS_CMS.Models.Tickets
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>


    <link href="~/Content/Style.css" rel="stylesheet" />

    <link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/jquery-1.9.1.min.js")"></script>
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="..." crossorigin="anonymous" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body id="ticetscreen">


    <div class="sidebar">
        <a class=" active text-decoration-none" href="@Url.Action("Ticket","Tickets")">New Tickets</a>
        <a href="@Url.Action("Ticket_History","Tickets")" class="text-decoration-none">Ticket History</a>

        <a href="@Url.Action("Logout", "Login")" class="text-decoration-none align-baseline" id="logoutlink" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom">
            <i class='bx bx-log-out' style="font-size:24px !important;color:red !important;"></i>
            Logout
        </a>

    </div>
    <nav class="nav">
        <h3 class="mt-3" id="navheading">TICKET SYSTEM</h3>
    </nav>
    <div class="content">
        <div class="row" style="margin-top:10px">
            <div class="col-lg-9 col-sm-8">
                <ul class="breadcrumb mt-3">
                    <li style="color: #2888bb;">NEW TICKETS</li>

                </ul>
            </div>


        </div>

        @*Text Area*@
        @using (Html.BeginForm("Ticket", "Tickets", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <form>
                <div class="row">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.TC_Date, "Date:", new { @class = "pb-2" })
                        @Html.TextBoxFor(model => model.TC_Date, new { @class = "form-control", @readonly = "true", id = "dateTextbox" })
                    </div>
                    <div class="col-md-7">
                        @Html.LabelFor(model => model.TC_SUBJECT, "Subject:", new { @class = "pb-2" })
                        @Html.TextBoxFor(model => model.TC_SUBJECT, new { @class = "form-control", id = "sub" })
                    </div>
                    <div class="col-md-5 mt-2">
                        @Html.LabelFor(model => model.TC_PRIORITYTYPE, "Priority", new { @class = "pb-2" })
                        @Html.DropDownListFor(model => model.TC_PRIORITYTYPE,
                     new SelectList(new List<string> { "Normal", "Urgent", "Critical", "Emergency" }),
                     "Please select an option",
                     new { @class = "form-select" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.TC_COMMENTS, "Comments", new { @class = "pb-2" })
                        @Html.TextAreaFor(model => model.TC_COMMENTS, new { @class = "form-control custom-textarea", placeholder = "Please enter your comments here....", rows = "10", cols = "70" })
                    </div>
                    <div class="col-md-12 mt-2">
                        @Html.Label("myfile", "Attachments:")
                        <input type="file" id="myfile" name="myfile" />
                    </div>
                    <div class="col-md-12 mt-2 d-flex justify-content-end">
                        <button type="submit" class="btn btn-success me-3">Submit</button>
                        @*<button type="submit" class="btn btn-danger">Cancel</button>*@
                    </div>

                </div>

            </form>
        }

        <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel" style="height: 150px;">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title text-align-center" id="offcanvasBottomLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body d-flex flex-column justify-content-center align-items-center">
                <h4>Are you sure you want to log out?</h4>
            </div>
            <div class="offcanvas-footer d-flex justify-content-center">
                <input type="button" class="btn btn-success me-3" id="confirmLogoutBtn" value="Confirm" tabindex="1">
                <input type="button" class="btn btn-danger" data-bs-dismiss="offcanvas" value="Cancel" tabindex="2">
            </div>
        </div>


    </div>

    <!-- LogOut JS -->
    <script src="~/Scripts/Logoutjs.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const sidebarLinks = document.querySelectorAll(".sidebar a");

            let activeLinkFound = false;

            // Highlight the active link based on the current URL path
            sidebarLinks.forEach(link => {
                if (link.pathname === window.location.pathname) {
                    link.classList.add("active");
                    activeLinkFound = true; // Mark as found
                }
            });

            // Set "New Tickets" as default if no active link matches
            if (!activeLinkFound) {
                const defaultLink = document.querySelector('.sidebar a.default-active');
                if (defaultLink) {
                    defaultLink.classList.add("active");
                }
            }

            // Add click event to update the active class
            sidebarLinks.forEach(link => {
                link.addEventListener("click", function () {
                    // Remove active class from all links
                    sidebarLinks.forEach(l => l.classList.remove("active"));

                    // Add active class to the clicked link
                    this.classList.add("active");
                });
            });
        });
    </script>

    <script>
        // JavaScript to set and continuously update the current date and time in 12-hour format
        document.addEventListener("DOMContentLoaded", function () {
            const dateTextbox = document.getElementById("dateTextbox");

            function updateDateTime() {
                const now = new Date();

                // Format the date and time as "YYYY-MM-DD HH:mm:ss AM/PM"
                const year = now.getFullYear();
                const month = String(now.getMonth() + 1).padStart(2, "0");
                const day = String(now.getDate()).padStart(2, "0");

                let hours = now.getHours();
                const minutes = String(now.getMinutes()).padStart(2, "0");
                const seconds = String(now.getSeconds()).padStart(2, "0");

                const ampm = hours >= 12 ? "PM" : "AM"; // Determine AM or PM
                hours = hours % 12; // Convert to 12-hour format
                hours = hours ? hours : 12; // Adjust for midnight (0 becomes 12)

                const formattedDate = `${day}-${month}-${year} ${hours}:${minutes}:${seconds} ${ampm}`;
                dateTextbox.value = formattedDate;
            }

            // Call updateDateTime initially to set the value immediately
            updateDateTime();

            // Update the date and time every second
            setInterval(updateDateTime, 1000);
        });
    </script>

    <script>
        document.querySelector('form').addEventListener('submit', function (event) {
            var fileInput = document.getElementById('myfile');
            if (!fileInput.files.length) {
                alert('Please select a file to upload.');
                event.preventDefault();
            }
        });
    </script>


</body>
</html>

