@model PSS_CMS.Models.Projectmaster
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <link href="~/assets/img/bexlogo_wob.png" rel="icon">
    <link href="~/assets/img/bexlogo_wob.png" rel="apple-touch-icon">
    <title>BEYONDEXS - SERVICE MANAGEMENT</title>
    <link href="~/Content/FooterResponsive.css" rel="stylesheet" />
    <link href="~/Content/ClientSide.css" rel="stylesheet" />
    <link href="~/Content/Style1.css" rel="stylesheet" />
    <link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/jquery-1.9.1.min.js")"></script>
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>

    @*Bootstrap Icons and Boxicons*@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>

    <script src="~/Scripts/Sidebarscript.js"></script>
    <link href="~/Content/Responsive.css" rel="stylesheet" />
    <link href="~/Content/Colors.css" rel="stylesheet" />
    <link href="~/Content/SideMenu.css" rel="stylesheet" />
    <style>
        select#SelectedRole, select.form-select.textboxcolors {
            font-size: 13px;
        }

        .swal-btn-continue {
            background-color: #6ed3d0 !important;
            color: white !important;
            border-radius: 5px;
            padding: 8px 20px;
            font-weight: bold;
        }

        .swal-btn-back {
            background-color: #f0a72d !important;
            color: white !important;
            border-radius: 5px;
            padding: 8px 20px;
            font-weight: bold;
        }

        select#TUG_NAME {
            display: block;
            width: 100%;
            height: 34px;
            padding: 6px 12px;
            font-size: 14px;
            line-height: 1.42857143;
            color: #555;
            background-image: none;
            border: 1px solid #ccc;
            border-radius: 4px;
            -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            -webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
        }

        .tabs {
            width: 100%;
            max-width: 1200px;
            margin: 20px;
            margin-bottom: 40px;
        }

        .tab-buttons {
            display: flex;
            border-bottom: 2px solid #ccc;
        }

            .tab-buttons button {
                flex: 1;
                padding: 12px;
                background-color: #eee;
                border: none;
                cursor: pointer;
                transition: background 0.3s ease;
                font-weight: bold;
            }

                .tab-buttons button:hover {
                    background-color: #ddd;
                }

                .tab-buttons button.active {
                    background-color: #004e92;
                    color: white;
                }

        .tab-content {
            display: none;
            padding: 20px;
            border: 1px solid #ccc;
            border-top: none;
            background-color: white;
        }

            .tab-content.active {
                display: block;
            }
    </style>
</head>
<body>
    @*Sidebar*@
    <nav class="sidebar close">
        <header>
            <div class="text logo-text" style="display:inline-block">

                <a href="@Url.Action("ContractDashboard", "Contract")">


                    @if (Session["Logo"] != null)
                    {
                        <img src="data:image/png;base64,@Session["Logo"]" alt="PSS Logo" class="logo" />
                    }

                </a>


            </div>

            <i class="bx bx-chevron-right toggle" style="margin-right:28px;margin-top:16px;"></i>

        </header>
        <div class="menu-bar">
            <div class="menu">
                <ul class="menu-links" style="margin-left:20px">
                    <!-- ACCOUNTS ADMIN -->
                    <li class="nav-link openfold" style="margin-top:10px;">
                        <img src="~/assets/img/software-engineer.png" class="settingsIcon" style="width: 25px; height: 25px; margin-bottom: 10px;" />
                        <img src="~/assets/img/software-engineer.png" class="openIcon" style="display: none; width: 25px; height: 25px; margin-bottom: 10px;" />
                        <span class="text nav-text" style="margin-left:15px">ACCOUNTS ADMIN</span>
                    </li>
                    <!-- Customer Accounts -->
                    <li class="nav-link">
                        <a href="@Url.Action("CustomerList", "Contract")">
                            <i class='bx bxs-file' style="font-size:20px"></i>
                            <span class="text nav-text" style="margin-left:15px">User Accounts</span>
                        </a>
                    </li>
                    <li class="nav-link">
                        <a href="@Url.Action("List", "AccountantCustomerInvoice")">
                            <i class='bi bi-bag-check' style="font-size:20px"></i>
                            <span class="text nav-text" style="margin-left:15px">Customer Invoice</span>
                        </a>
                    </li>

                    <li class="nav-link">
                        <a href="@Url.Action("Index", "ServiceInvoice")">
                            <i class='bi bi-list-columns-reverse' style="font-size:20px"></i>
                            <span class="text nav-text" style="margin-left:15px">Service Invoice</span>
                        </a>
                    </li>
                    <!-- Settings Section -->
                    <li class="nav-link openfold" style="margin-top:10px;">
                        <img src="~/assets/img/cyber-security.png" class="settingsIcon" style="width: 25px; height: 25px; margin-bottom: 5px;" />
                        <img src="~/assets/img/cyber-security.png" class="openIcon" style="display: none; width: 25px; height: 25px; margin-bottom: 5px;" />
                        <span class="text nav-text" style="margin-left:15px">SECURITY</span>
                    </li>

                    @*Change Password*@
                    <li class="nav-link">
                        <a href="@Url.Action("ChangePassword", "Contract")">
                            <i class='bx bxs-key' style="font-size:24px"></i>
                            <span class="text nav-text" style="margin-left:15px">Change Password</span>
                        </a>
                    </li>
                    <!-- Logout -->
                    <li class="nav-link">
                        <a href="@Url.Action("Index", "Login")" class="logout-trigger login-link text-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="Logout">
                            <i class='bx bx-log-out' style="font-size:24px"></i>
                            <span class="text nav-text" style="margin-left:15px">Logout</span>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="content" style=" overflow-x: hidden!important;">
        <nav class="nav d-flex">
            <div class="p-2 flex-grow-1"> <h3 style="margin-top:10px" class="heading ms-3 adminheadinres">SERVICE MANAGEMENT</h3></div>
            <div class="p-2" style="margin-right:10px"><h4 class="heading adminlogoutres">@Session["UserName"].ToString().ToUpper() - @Session["Role"]</h4></div>
            <div class="p-2 me-3 logout" style="margin-right:10px" data-toggle="tooltip" data-placement="bottom" title="Log out">
                <a href="@Url.Action("Logout", "Login")" class="text-decoration-none" id="logoutlink" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom">
                    <i class='bx bx-log-out' style="font-size:24px;color:red !important;" id="logoutresiconadmin"></i>
                </a>
            </div>

        </nav>


        <div class="row" style="margin-top:10px">
            <div class="col-lg-12">
                <ul class="breadcrumb mt-1" style="margin-bottom:0px!important">
                    <li>CUSTOMER</li>
                    <li class="" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("List", "AccountantCustomerInvoice")">LIST</a></li>
                    <li>CREATE</li>
                </ul>
            </div>
        </div>
        <div class="tabs">
            <div class="tab-buttons">
                <button class="active" onclick="showTab(0)">Main</button>
                <button onclick="showTab(1)">Statutary</button>
                <button onclick="showTab(2)">Contacts</button>
            </div>
            @using (Html.BeginForm("Create", "AccountantCustomerInvoice", FormMethod.Post, new { id = "createform", enctype = "multipart/form-data" }))
            {

                <div class="tab-content active">

                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.LT_RECID, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @if (ViewBag.LocationType != null)
                            {
                                var LocationList = ViewBag.LocationType as IEnumerable<SelectListItem>;

                                if (LocationList != null && LocationList.Any())
                                {
                                    var modifiedLocationList = new List<SelectListItem>(LocationList);

                                    // Add "--Select Project--" option only if more than one project is available
                                    modifiedLocationList.Insert(0, new SelectListItem { Text = "-- Select Location Type --", Value = "" });

                                    @Html.DropDownList("SelectedLocation",
                                                                 modifiedLocationList,
                                                                 new { @class = "form-select textboxcolors", id = "SelectedLocation" })
                                }
                                else
                                {
                                    var modifiedLocationList = new List<SelectListItem>(LocationList);
                                    // Add "--Select Project--" option only if more than one project is available
                                    modifiedLocationList.Insert(0, new SelectListItem { Text = "No Location's are available", Value = "" });

                                    @Html.DropDownList("SelectedLocation",
                                                                 modifiedLocationList,
                                                                 new { @class = "form-select textboxcolors", id = "" }) }
                            }
                            else
                            {
                                <p>No location's are available</p>}
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.SP_RECID, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">

                            @{
                                var LocationRefList = ViewBag.LocationRef as IEnumerable<SelectListItem>;
                            }

                            @if (LocationRefList != null && LocationRefList.Any())
                            {
                                var modifiedLocationRefList = new List<SelectListItem>(LocationRefList);

                                // Add default option
                                modifiedLocationRefList.Insert(0, new SelectListItem
                                {
                                    Text = "-- Select Location Reference --",
                                    Value = ""
                                });

                                @Html.DropDownList("SelectedLocationRef",
                                    modifiedLocationRefList,
                                    new { @class = "form-select textboxcolors", id = "LocationRefDropdown" })
                            }
                            else
                            {
                                var modifiedLocationRefList = new List<SelectListItem>();

                                // Add "no data" option
                                modifiedLocationRefList.Insert(0, new SelectListItem
                                {
                                    Text = "No Location Reference available",
                                    Value = ""
                                });

                                @Html.DropDownList("SelectedLocationRef",
                                    modifiedLocationRefList,
                                    new { @class = "form-select textboxcolors", id = "LocationRefDropdown" })
                            }


                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_CODE, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_CODE, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_INVOICENO, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_INVOICENO, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                        </div>
                    </div>



                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_PRECID, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @if (ViewBag.Product != null)
                            {
                                var ProductList = ViewBag.Product as IEnumerable<SelectListItem>;

                                if (ProductList != null && ProductList.Any())
                                {
                                    var modifiedProductList = new List<SelectListItem>(ProductList);

                                    // Add "--Select Project--" option only if more than one project is available
                                    modifiedProductList.Insert(0, new SelectListItem { Text = "-- Select Product --", Value = "" });

                                    @Html.DropDownList("SelectedProduct",
                                                                 modifiedProductList,
                                                                 new { @class = "form-select textboxcolors", id = "" })
                                }
                                else
                                {
                                    var modifiedProductList = new List<SelectListItem>(ProductList);
                                    // Add "--Select Project--" option only if more than one project is available
                                    modifiedProductList.Insert(0, new SelectListItem { Text = "No Product's are available", Value = "" });

                                    @Html.DropDownList("SelectedProduct",
                                                                 modifiedProductList,
                                                                 new { @class = "form-select textboxcolors", id = "" }) }
                            }
                            else
                            {
                                <p>No product's are available</p>}
                        </div>
                    </div>


                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_NAME, new { @class = "labels" })
                            @Html.HiddenFor(model => model.CU_NAME, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", id = "CU_NAME" } })

                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            <select id="UserDropdown" class="form-select textboxcolors">
                                <option value="">-- Select User --</option>
                                @foreach (var user in ViewBag.User as List<PSS_CMS.Models.UserDropdownItem>)
                                {
                                    <option value="@user.Value"
                                            data-username="@user.Text"
                                            data-email="@user.Email"
                                            data-mobile="@user.Mobile">
                                        @user.Text
                                    </option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_EMAIL, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_EMAIL, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", id = "CU_EMAIL" } })
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_MOBILENO, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_MOBILENO, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", id = "CU_MOBILENO" } })
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_WARRANTYUPTO, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_WARRANTYUPTO, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", id = "", type = "date" } })
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_ADDRESS, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_ADDRESS, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                        </div>
                    </div>




                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_SORTORDER, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_SORTORDER, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off" } })

                        </div>
                    </div>
                    <div class="mb-3 d-flex justify-content-end">
                        <input type="submit" value="Save" class="submitbuttons me-3" tabindex="" id="savebutton" />
                        <button type="button" class="nextbutton btn btn-secondary me-3" onclick="showNextTab()">Next</button>
                        <input type="button" value="Cancel" class="cancelbuttons" tabindex="" id="" onclick="window.location.href='@Url.Action("List", "AccountantCustomerInvoice", new { CompanyRecID = Session["CompanyID"] })'" />
                    </div>

                </div>
                <div class="tab-content">
                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_GST, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_GST, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })

                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_PANNUMBER, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_PANNUMBER, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })

                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_TANNUMBER, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_TANNUMBER, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })

                        </div>
                    </div>



                    <div class="row mb-3">
                        <div class="col-lg-2 col-md-2 col-sm-12">
                            @Html.LabelFor(model => model.CU_WARRANTYFREECALLS, new { @class = "labels" })
                        </div>
                        <div class="col-lg-5 col-md-5 col-sm-12">
                            @Html.EditorFor(model => model.CU_WARRANTYFREECALLS, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off" } })

                        </div>
                    </div>
                    <div class="mb-3 d-flex justify-content-end">
                        <input type="submit" value="Save" class="submitbuttons me-3" tabindex="" id="savebutton" />
                        <button type="button" class="nextbutton btn btn-secondary me-3" onclick="showNextTab()">Next</button>
                        <input type="button" value="Cancel" class="cancelbuttons" tabindex="" id="" onclick="window.location.href='@Url.Action("List", "AccountantCustomerInvoice", new { CompanyRecID = Session["CompanyID"] })'" />


                    </div>
                </div>
                <div class="tab-content">
                    <div class="row">
                        <!-- Contact Person 1 -->
                        <div class="col-lg-4 col-md-4 col-sm-12">
                            <h5 class="bg-secondary text-white p-3 fw-bold">Contact Person 1</h5>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONNAME1, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONNAME1, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONEMAILID1, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONEMAILID1, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONMOBILE1, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONMOBILE1, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONDESIGINATION1, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONDESIGINATION1, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                        </div>

                        <!-- Contact Person 2 -->
                        <div class="col-lg-4 col-md-4 col-sm-12">
                            <h5 class="bg-secondary text-white p-3 fw-bold">Contact Person 2</h5>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONNAME2, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONNAME2, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONEMAILID2, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONEMAILID2, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONMOBILE2, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONMOBILE2, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONDESIGINATION2, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONDESIGINATION2, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                        </div>

                        <!-- Contact Person 3 -->
                        <div class="col-lg-4 col-md-4 col-sm-12">
                            <h5 class="bg-secondary text-white p-3 fw-bold">Contact Person 3</h5>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONNAME3, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONNAME3, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONEMAILID3, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONEMAILID3, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONMOBILE3, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONMOBILE3, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CU_CONTACTPERSONDESIGINATION3, new { @class = "labels" })
                                @Html.EditorFor(model => model.CU_CONTACTPERSONDESIGINATION3, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                            </div>
                            <div class="mb-3 d-flex justify-content-end">
                                <input type="submit" value="Save" class="submitbuttons me-3" tabindex="" id="savebutton" />
                                <input type="button" value="Cancel" class="cancelbuttons" tabindex="" id="" onclick="window.location.href='@Url.Action("List", "AccountantCustomerInvoice", new { CompanyRecID = Session["CompanyID"] })'" />
                            </div>

                        </div>
                    </div>
                </div>}
        </div>
        <footer>
            <div class="footer">
                <div class="flex-container" style="padding-top:5px;padding-left:5px">

                    <div class="flex-item">
                        <div class="d-flex justify-content-center footerb">
                            <span class="minicheck minicheck1"></span>
                            - Text Fields
                        </div>
                    </div>

                    <div class="flex-item">
                        <div class="d-flex justify-content-center footerb">
                            <span class="minicheck minicheck2"></span>
                            - Number Fields
                        </div>
                    </div>

                </div>
            </div>
        </footer>

    </div>


    <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel" style="height: 150px;">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title text-align-center" id="offcanvasBottomLabel"></h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body d-flex flex-column justify-content-center align-items-center">
            <h4>Are you sure you want to log out?</h4>
        </div>
        <div class="offcanvas-footer d-flex justify-content-center">
            <input type="button" class="btncolorsubmit me-3" id="confirmLogoutBtn" value="Confirm" tabindex="1">
            <input type="button" class="btncolorcancel" data-bs-dismiss="offcanvas" value="Cancel" tabindex="2">
        </div>
    </div>
    <div id="preloader2"></div>
    <script>
        function showTab(index) {
            const contents = document.querySelectorAll('.tab-content');
            const buttons = document.querySelectorAll('.tab-buttons button');

            contents.forEach(c => c.classList.remove('active'));
            buttons.forEach(b => b.classList.remove('active'));

            contents[index].classList.add('active');
            buttons[index].classList.add('active');
        }
        function showNextTab() {
            const contents = document.querySelectorAll('.tab-content');
            let activeIndex = Array.from(contents).findIndex(c => c.classList.contains('active'));

            if (activeIndex !== -1 && activeIndex < contents.length - 1) {
                showTab(activeIndex + 1);
            }
        }
    </script>
    <!-- LogOut JS -->
    <script src="~/Scripts/Logoutjs.js"></script>

    <script>
        document.getElementById("UserDropdown").addEventListener("change", function () {
            var selected = this.options[this.selectedIndex];
            var email = selected.getAttribute("data-email") || "";
            var name = selected.getAttribute("data-username") || "";
            var mobile = selected.getAttribute("data-mobile") || "";

            document.getElementById("CU_EMAIL").value = email;
            document.getElementById("CU_NAME").value = name;
            document.getElementById("CU_MOBILENO").value = mobile;
        });

    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    @*Logout Pronptbox script*@
    <script>
    document.getElementById("logoutLink").addEventListener("click", function () {
        Swal.fire({
            title: "Are you sure you want to log out?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Confirm",
            cancelButtonText: "Cancel",
            confirmButtonColor: "#28a745",
            cancelButtonColor: "#dc3545",
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("Logout", "Login")';
            }
        });
    });
    </script>

    @*Toastr for created succesfully*@
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- jQuery CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
    $(document).ready(function () {
        $("#createform").submit(function (event) {
            event.preventDefault();

            var submitBtn = $("#savebutton");
            submitBtn.prop("disabled", true);

            var formData = new FormData(this);

            // Disable page interaction
            $("body").css("pointer-events", "none");

            $.ajax({
                url: '@Url.Action("Create", "AccountantCustomerInvoice")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {

                        // 🔹 Show SweetAlert loading dialog
                        Swal.fire({
                            title: "Processing...",
                            html: "Please wait while we save your changes.",
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            didOpen: () => {
                                Swal.showLoading(); // show spinner
                            }
                        });
                        // ⏳ After small delay, show success popup
                        setTimeout(function () {
                        Swal.fire({
                            title: "Success!",
                            text: response.message,
                            icon: "success",
                            showCancelButton: true,
                            confirmButtonText: "Continue",
                            cancelButtonText: "Back to List",
                            allowOutsideClick: false, // Prevent closing by clicking outside
                            allowEscapeKey: false, // Prevent closing using Esc key
                            customClass: {
                                confirmButton: "swal-btn-continue",
                                cancelButton: "swal-btn-back"
                            },
                            didOpen: () => {
                                // Allow interaction inside the alert only
                                $(".swal2-container").css("pointer-events", "auto");
                            }
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            } else {
                                window.location.href = '@Url.Action("List", "AccountantCustomerInvoice")';
                            }
                        });
                    }, 1000); // 1 second delay for "Processing"
                    } else {
                        Swal.fire({
                            title: "Message",
                            text: response.message,
                            icon: "info",
                            allowOutsideClick: false,
                            allowEscapeKey: false
                        });
                        resetButton();
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Error!",
                        text: "An unexpected error occurred.",
                        icon: "error",
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    });
                    resetButton();
                }
            });
        });

        function resetButton() {
            $("#savebutton").prop("disabled", false).text("Submit");
            $("body").css("pointer-events", "auto"); // Re-enable page interaction
        }
    });
    </script>

    @*Based on location Type fill the value in the locationref dropdown*@
    <script>
    $(document).ready(function () {
        $("#SelectedLocation").change(function () {
            var locationId = $(this).val();

            if (locationId) {
                $.ajax({
                    url: '@Url.Action("LocationRef", "AccountantCustomerInvoice")',
                    type: 'GET',
                    data: { locationid: locationId },
                    success: function (result) {
                        var $dropdown = $("#LocationRefDropdown");
                        $dropdown.empty(); // clear old options

                        if (result && result.length > 0) {
                            $dropdown.append($("<option>").val("").text("-- Select Location Reference --"));
                            $.each(result, function (i, item) {
                                $dropdown.append($("<option>").val(item.Value).text(item.Text));
                            });
                        } else {
                            $dropdown.append($("<option>").val("").text("No Location Reference Available"));
                        }
                    },
                    error: function (xhr, status, error) {
                        alert("Error fetching Location Ref: " + error);
                    }
                });
            }
        });
    });
    </script>

</body>

</html>