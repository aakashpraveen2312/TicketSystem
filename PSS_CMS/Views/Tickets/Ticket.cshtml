@model PSS_CMS.Models.Tickets
@using CaptchaMvc.HtmlHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <link href="~/Content/FooterResponsive.css" rel="stylesheet" />
    <link href="~/Content/Style.css" rel="stylesheet" />
    <link href="~/Content/ClientSide.css" rel="stylesheet" />
    <link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/jquery-1.9.1.min.js")"></script>
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="..." crossorigin="anonymous" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="~/Content/Responsive.css" rel="stylesheet" />
    <!-- Toastr CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

    <!-- jQuery (required by Toastr) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <style>
        input#dateTextbox, select#SelectedProjectType, input#sub, input#warranty, input#warrantyfreecalls, select#SelectedTicketType, select#TC_PRIORITYTYPE, input#date, select#CustomerDropdown {
            max-width: 450px;
            height: 35px;
        }
        select#CustomerDropdown{
            font-size: 15px;
        }
        input#termsCheckbox {
            width: 23px;
            height: 21px;
        }
    </style>
</head>

<body id="ticetscreen" onload="hideLoadingScreen()">
    <div id="loadingScreen">
        <div class="loader"></div>
    </div>



    <nav class="nav d-flex">
        <div class="p-2 flex-grow-1">
            <h3 style="margin-top:10px" class="heading ms-3">TICKET SYSTEM</h3>
        </div>

        <div class="p-2" style="margin-right:10px">
            <h4 class="heading">@Session["UserName"].ToString().ToUpper()</h4>
        </div>

        <div class="p-2 me-3 dropdown">
            <a href="#" class="text-decoration-none" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <i class='bx bx-user-circle' style="font-size:24px !important; color:purple !important;"></i>
            </a>

            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                <li><a class="dropdown-item" href="@Url.Action("FAQ", "Tickets")">FAQ</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="@Url.Action("UserDashboardCount", "UserDashboard")">DashBoard</a></li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <a href="@Url.Action("Logout", "Login")" class="text-decoration-none dropdown-item text-danger" id="logoutlink" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom">
                        Logout    <i class='bx bx-log-out' style="font-size:24px !important;color:red !important;"></i>

                    </a>
                </li>

            </ul>
        </div>
    </nav>


    <div class="content">
        <div class="row" style="margin-top:10px">
            <div class="col-lg-12 col-sm-12">
                <ul class="breadcrumb mt-2 ">
                    <li class="resticketraisebreadcrumb" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("Ticket_History", "Tickets")">TICKET HISTORY</a></li>

                    <li class="resticketraisebreadcrumb" style="color: #2888bb;">NEW TICKETS</li>

                </ul>
            </div>


        </div>

        @*New Ticket Form*@
        @using (Html.BeginForm("Ticket", "Tickets", FormMethod.Post, new { id = "myForm", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <form>
                <div class="row">
                    <div class="col-md-6 col-sm-12">
                        @Html.LabelFor(model => model.TC_Date, "Date", new { @class = "pb-2 " })
                        @Html.TextBoxFor(model => model.TC_Date, new { @class = "form-control", id = "date", type = "datetime-local", required = "required", tabindex = "1" })
                    </div>

                    <div class="col-md-6 col-sm-12 ptypeticketres" style=" display: flex; flex-direction: column; justify-content: flex-end; flex-wrap: wrap;align-content: flex-end;">

                        <!-- First Dropdown for Project Types -->
                        @if (Model.TicketCombo2.TicketTypes2 != null)
                        {
                            <!-- Show dropdown with "Select Project" placeholder if count > 1 -->
                            @Html.LabelFor(model => model.SelectedProjectType, "Product", new { @class = "pb-2 " })
                            @Html.DropDownListFor(model => model.SelectedProjectType, Model.TicketCombo2.TicketTypes2, "Select Product", new { @class = "form-select", required = "required", onchange = "loadMaterials(this.value)", tabindex = "2" })
                        }

                        else
                        {
                            <!-- Show dropdown without placeholder if count == 1 -->
                            @Html.LabelFor(model => model.SelectedProjectType, "Product", new { @class = "pb-2 " })
                            @Html.DropDownListFor(model => model.SelectedProjectType, Model.TicketCombo2.TicketTypes2, "No Product's are available", new { @class = "form-select", required = "required" })
                        }

                    </div>
                </div>


                <div class="row mt-3">
                    <div class="col-md-6 col-sm-12">
                        @Html.LabelFor(model => model.TC_SUBJECT, "Subject", new { @class = "pb-2" })
                        @Html.TextBoxFor(model => model.TC_SUBJECT, new
                        {
                            @class = "form-control minicheck1",
                            id = "sub",
                            required = "required",
                            tabindex = "3",
                            style = "background-color: #dceef5;"
                        })
                    </div>
                    <div class="col-md-6 col-sm-12 tictypeticketres" style=" display: flex; flex-direction: column; justify-content: flex-end; flex-wrap: wrap;align-content: flex-end;">
                        @Html.LabelFor(model => model.TC_CUSTOMER, "Customer", new { @class = "pb-2" })
                        @Html.DropDownList("SelectedCustomer",
                        new List<SelectListItem> {
                        new SelectListItem { Text = "No Product is selected", Value = "", Selected = true }
                        },
                         new { @class = "form-select textboxcolors", id = "CustomerDropdown", required = "required" })

                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 col-sm-12 mt-2">

                        <!-- Third Dropdown for Priority Types -->
                        @Html.LabelFor(model => model.TC_PRIORITYTYPE, "Priority type", new { @class = "pb-2 " })
                        @Html.DropDownListFor(model => model.TC_PRIORITYTYPE,
                     new SelectList(new List<string> { "Normal", "Urgent", "Critical", "Emergency" }),
                     "Select priority type",
                     new { @class = "form-select prioritystyle", required = "required", tabindex = "4" })
                    </div>
                    <div class="col-md-6 col-sm-12 tictypeticketres" style=" display: flex; flex-direction: column; justify-content: flex-end; flex-wrap: wrap;align-content: flex-end;">
                        @Html.LabelFor(model => model.TC_WARRANTYUPTO, "Warranty Upto", new { @class = "pb-2" })
                        @Html.TextBoxFor(model => model.TC_WARRANTYUPTO, new { @class = "form-control", id = "warranty", @readonly = "readonly", tabindex = "5" })
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-6 col-sm-12">
                        @Html.LabelFor(model => model.SelectedTicketType, "Ticket type", new { @class = "pb-2" })
                        @Html.DropDownListFor(model => model.SelectedTicketType, Model.TicketCombo.TicketTypes, "Select Ticket Type", new { @class = "form-select", required = "required", tabindex = "6" })

                    </div>
                    <div class="col-md-6 col-sm-12 tictypeticketres" style=" display: flex; flex-direction: column; justify-content: flex-end; flex-wrap: wrap;align-content: flex-end;">
                        @Html.LabelFor(model => model.CU_WARRANTYFREECALLS, "Warranty Free Calls", new { @class = "pb-2" })
                        @Html.TextBoxFor(model => model.CU_WARRANTYFREECALLS, new { @class = "form-control", id = "warrantyfreecalls", @readonly = "readonly", tabindex = "7" })
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-md-12 col-sm-12">
                        @Html.LabelFor(model => model.TC_COMMENTS, "User Comments", new { @class = "pb-2" })
                        @Html.TextAreaFor(model => model.TC_COMMENTS, new { @class = "form-control custom-textarea  ", style = "background-color: #dceef5;", placeholder = "Please enter your comments here....", rows = "10", cols = "70", required = "required", tabindex = "8", })

                    </div>

                    <div class="col-md-12 col-sm-12 mt-2">
                        @Html.Label("myfile", "Attachments:")
                        <input type="file" id="myfile" name="myfile" tabindex="6"
                               accept=".pdf, .xlsx, .jpeg, .png, .jpg, .docx, .csv" onchange="validateFile()" />
                        <small id="fileError" style="color: red; display: none;">This file format is not supported.<br />The formats are(.pdf, .xlsx, .txt, .jpeg, .png, .jpg, .docx, .csv)</small>
                    </div>

                    <div class="col-md-12 mt-2">
                        @Html.MathCaptcha()


                    </div>

                    <div class="col-md-12 mt-2 mb-3 d-flex justify-content-lg-end justify-content-md-end justify-content-start">
                        <input type="checkbox" id="termsCheckbox" name="termsAndConditions" class="me-2" />
                        <label for="termsCheckbox" class="me-4 mt-2">I agree to paid service</label>
                        <button type="submit" class="btncolorsubmit me-3" id="submitBtn" tabindex="9">Submit</button>
                        <button type="button" class="btncolorcancel" onclick="window.location.href='@Url.Action("Ticket_History","Tickets")'" tabindex="10">
                            Cancel
                        </button>
                    </div>


                </div>

            </form>

        }
        <br />
        
  
        <footer >
            <div class="footer" style="background-color:white!important">
                <div class="flex-container" style="padding-top:5px;padding-left:5px">

                    <div class="flex-item">
                        <div class="d-flex justify-content-center footerb">
                            <span class="minicheck minicheck1"></span>
                            - Text Fields
                        </div>
                    </div>

                </div>
            </div>
        </footer>


        <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel" style="height: 150px;">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title text-align-center" id="offcanvasBottomLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body d-flex flex-column justify-content-center align-items-center">
                <h4>Are you sure you want to log out?</h4>
            </div>
            <div class="offcanvas-footer d-flex justify-content-center">
                <input type="button" class="btncolorsubmit me-3" id="confirmLogoutBtn" value="Confirm" tabindex="1">
                <input type="button" class="btncolorcancel" data-bs-dismiss="offcanvas" value="Cancel" tabindex="2">
            </div>
        </div>


    </div>

    <!-- LogOut JS -->
    <script src="~/Scripts/Logoutjs.js"></script>
    <script src="~/Scripts/Formatcheck.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const sidebarLinks = document.querySelectorAll(".sidebar a");

            let activeLinkFound = false;

            // Highlight the active link based on the current URL path
            sidebarLinks.forEach(link => {
                if (link.pathname === window.location.pathname) {
                    link.classList.add("active");
                    activeLinkFound = true; // Mark as found
                }
            });

            // Set "New Tickets" as default if no active link matches
            if (!activeLinkFound) {
                const defaultLink = document.querySelector('.sidebar a.default-active');
                if (defaultLink) {
                    defaultLink.classList.add("active");
                }
            }

            // Add click event to update the active class
            sidebarLinks.forEach(link => {
                link.addEventListener("click", function () {
                    // Remove active class from all links
                    sidebarLinks.forEach(l => l.classList.remove("active"));

                    // Add active class to the clicked link
                    this.classList.add("active");
                });
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dateTextbox = document.getElementById("date");

            function formatForDateTimeLocal(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, "0");
                const day = String(date.getDate()).padStart(2, "0");
                const hours = String(date.getHours()).padStart(2, "0");
                const minutes = String(date.getMinutes()).padStart(2, "0");

                return `${year}-${month}-${day}T${hours}:${minutes}`;
            }

            const now = new Date();
            dateTextbox.value = formatForDateTimeLocal(now);
        });
    </script>


    <script>
        document.querySelector('form').addEventListener('submit', function (event) {
            var fileInput = document.getElementById('myfile');
            if (!fileInput.files.length) {

                event.preventDefault();
            }
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <script>
        document.getElementById("myForm").addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent default form submission

            var form = this;
            var formData = new FormData(form);

            // Disable submit button to prevent duplicate submissions
            var submitButton = form.querySelector("button[type='submit']");
            submitButton.disabled = true;
            submitButton.innerHTML = "Submitting..."; // Change text to 'Submitting...'

            fetch(form.action, {
                method: form.method,
                body: formData
            }).then(response => {
                if (response.ok) {
                    return response.json(); // Process the response as JSON
                }
                throw new Error("Form submission failed.");
            }).then(data => {
                // Check if the response status is error (e.g., captcha validation failure)
                if (data.status === "error") {
                    Swal.fire({
                        title: "Error",
                        text: data.message,
                        icon: "error",
                        confirmButtonText: "OK",
                        customClass: {
                            popup: 'swal-wide',
                            title: 'swal-title',
                            text: 'swal-text'
                        }
                    }).then(() => {
                        location.reload(); // Refresh the page when "OK" is clicked
                    });
                    // Change button text back to normal if there's an error
                    submitButton.disabled = false;
                    submitButton.innerHTML = "Submit";
                } else {
                    // Show SweetAlert modal on successful form submission
                    Swal.fire({
                        title: "",
                        html: `
                                                                                    <p style="font-size: 15px;"><b>Ticket Raised Successfuly <br/> Admin Will Reach You Soon</b></p>
                                                                                    <div style="display: flex; justify-content: center; gap: 15px; margin-top: 20px;">
                                                                                        <button id="confirmBtn" class="swal2-confirm swal2-styled" style="background-color: #6ed3d0; padding: 10px 15px; font-size: 13px;">Back to List</button>
                                                                                        <button id="cancelBtn" class="swal2-cancel swal2-styled" style="background-color: #f0a72d; padding: 10px 15px; font-size: 13px;">New Ticket</button>
                                                                                    </div>
                                                                                `,
                        showConfirmButton: false,
                        showCancelButton: false,
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        customClass: {
                            popup: 'swal-wide',
                            title: 'swal-title',
                            htmlContainer: 'swal-text'
                        },
                        didOpen: () => {
                            document.getElementById("confirmBtn").addEventListener("click", function () {
                                window.location.href = '/Tickets/Ticket_History'; // Redirect to Ticket History
                            });

                            document.getElementById("cancelBtn").addEventListener("click", function () {
                                window.location.href = '/Tickets/Ticket'; // Redirect to New Ticket
                            });
                        }
                    });
                }
            }).catch(error => {
                console.error("Error:", error);
                // Show SweetAlert for network/server errors
                Swal.fire({
                    title: "Submission Error",
                    text: "Something went wrong while submitting the form. Please try again later.",
                    icon: "error",
                    confirmButtonText: "OK"
                });

                // Change button text back to normal if there's a network/server error
                submitButton.disabled = false;
                submitButton.innerHTML = "Submit";
            }).finally(() => {
                // Ensure the button is re-enabled and text reset only if there's no error
                if (submitButton.innerHTML !== "Submit") {
                    submitButton.disabled = false;
                    submitButton.innerHTML = "Submit";
                }
            });
        });
    </script>
    @*Preloader script*@
    <script type="text/javascript">
        function preventBack() {
            window.history.forward();
        }
        setTimeout("preventBack()", 0);

    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            showLoadingScreen();

        });

        window.addEventListener('load', function () {
            // Delay hiding the preloader to ensure it's displayed even on fast loads
            setTimeout(hideLoadingScreen, 500); // 500ms delay before hiding
        });

        function showLoadingScreen() {
            document.getElementById('loadingScreen').style.display = 'flex';
        }

        function hideLoadingScreen() {
            document.getElementById('loadingScreen').style.display = 'none';
        }
    </script>
    @*Preloader script*@


    <!-- Loading of Customers based on product -->
    <script>
    function loadMaterials(selectedRecId) {
        $.ajax({
            url: '@Url.Action("ComboProductTicketNew", "Tickets")',
            type: 'GET',
            data: { Recid: selectedRecId },
            success: function (response) {
                $('#CustomerDropdown').empty();
                $('#warranty').val('');
                $('#warrantyfreecalls').val('');

                if (response.error) {
                    alert(response.error);
                    $('#CustomerDropdown').append($('<option>', {
                        value: '',
                        text: 'Error: ' + response.error
                    }));
                    clearMaterialFields();
                    return;
                }

                if (response.length > 0) {
                    $('#CustomerDropdown').append($('<option>', {
                        value: '',
                        text: '--Select Customer--'
                    }));

                    $.each(response, function (i, item) {
                        $('#CustomerDropdown').append($('<option>', {
                            value: item.Value,
                            text: item.Text,
                            'data-warranty': item.WarrantyUpto,
                            'data-warrantyfreecalls': item.WarrantyFreeCalls
                        }));
                    });
                } else {
                    $('#CustomerDropdown').append($('<option>', {
                        value: '',
                        text: 'No customer available'
                    }));

                }
            },
            error: function () {
                alert('Failed to load customers.');
                $('#CustomerDropdown').append($('<option>', {
                    value: '',
                    text: 'Error loading customers'
                }));
            }
        });
    }

    </script>

    @*If i chnage the customer it fills the waranty upto and warranty calls input box*@
    <script>
        $(document).on('change', '#CustomerDropdown', function () {
            const selectedOption = $(this).find('option:selected');
            const warrantyUpto = selectedOption.data('warranty');
            const warrantyFreeCalls = selectedOption.data('warrantyfreecalls');

            if (warrantyUpto) {
                const date = new Date(warrantyUpto);
                const formattedDate = ("0" + date.getDate()).slice(-2) + "-" +
                    ("0" + (date.getMonth() + 1)).slice(-2) + "-" +
                    date.getFullYear();
                $('#warranty').val(formattedDate);
                $('#warrantyfreecalls').val(warrantyFreeCalls);
            } else {
                $('#warranty').val('');
            }
        });
    </script>

    @*Check for warranty upto*@
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function () {

            // Handle warranty logic on dropdown change
            $(document).on('change', '#CustomerDropdown', function () {
                const selectedOption = $(this).find('option:selected');
                const warrantyUpto = selectedOption.data('warranty');
                const warrantyFreeCalls = selectedOption.data('warrantyfreecalls');

                if (warrantyUpto) {
                    const date = new Date(warrantyUpto);
                    const formattedDate = ("0" + date.getDate()).slice(-2) + "-" +
                        ("0" + (date.getMonth() + 1)).slice(-2) + "-" +
                        date.getFullYear();
                    $('#warranty').val(formattedDate);
                    $('#warrantyfreecalls').val(warrantyFreeCalls);

                    // Compare dates to enable/disable checkbox
                    const currentDate = new Date();
                    currentDate.setHours(0, 0, 0, 0);
                    date.setHours(0, 0, 0, 0);

                    if (date >= currentDate) {
                        // Warranty is valid
                        $('#termsCheckbox').prop('checked', false).prop('disabled', true);
                    } else {
                        // Warranty expired
                        $('#termsCheckbox').prop('disabled', false);
                    }

                } else {
                    $('#warranty').val('');
                    $('#termsCheckbox').prop('checked', false).prop('disabled', true);
                }
            });

            // Handle submit button click
            $('#submitBtn').on('click', function (e) {
                const warrantyDateStr = $('#warranty').val(); // Format: DD-MM-YYYY
                const isCheckboxChecked = $('#termsCheckbox').is(':checked');

                if (warrantyDateStr) {
                    const parts = warrantyDateStr.split('-');
                    const warrantyDate = new Date(parts[2], parts[1] - 1, parts[0]); // YYYY, MM-1, DD
                    const currentDate = new Date();
                    currentDate.setHours(0, 0, 0, 0);

                    if (warrantyDate < currentDate && !isCheckboxChecked) {
                        e.preventDefault(); // Block submission
                        Swal.fire({
                            icon: 'warning',
                            title: 'Warranty Expired',
                            text: 'The warranty has expired. Please agree to paid service.',
                            confirmButtonColor: '#d33'
                        });
                    }
                    // else: allow submit
                }
            });
        });
    </script>



    <script src="~/Scripts/Inactivitylogout.js"></script>
</body>
</html>

