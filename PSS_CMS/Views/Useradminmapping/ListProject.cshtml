@model IEnumerable<PSS_CMS.Models.Useradminmap>
@using GridMvc.Html
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <link href="~/Content/ClientSide.css" rel="stylesheet" />
    <link href="~/Content/Style1.css" rel="stylesheet" />
    <link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/jquery-1.9.1.min.js")"></script>
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    @*Bootstrap Icons and Boxicons and Fontawesome link*@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="..." crossorigin="anonymous" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="~/Scripts/Script.js"></script>
    <link href="~/Content/Responsive.css" rel="stylesheet" />
    <link href="~/Content/SideMenu.css" rel="stylesheet" />

</head>

<body>

    <div class="content" style=" overflow-x: hidden!important;">
        <nav class="nav d-flex">
            <div class="p-2 flex-grow-1"> <h3 style="margin-top:10px" class="heading ms-3 adminheadinres">TICKET SYSTEM</h3></div>
            <div class="p-2" style="margin-right:10px"><h4 class="heading adminlogoutres">@Session["UserName"]</h4></div>
            <div class="p-2 me-3 logout" style="margin-right:10px" data-toggle="tooltip" data-placement="bottom" title="Log out">
                <a href="@Url.Action("Logout", "Login")" class="text-decoration-none" id="logoutlink" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom">
                    <i class='bx bx-log-out' style="font-size:24px;color:red !important;" id="logoutresiconadmin"></i>

                </a>
            </div>

        </nav>
        <div class="row" style="margin-top:10px">
            <div class="col-lg-9">
                <ul class="breadcrumb mt-1" style="margin-bottom:0px!important">
                    <li class="resticketraisebreadcrumb" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("List", "UserLogin")">@Session["Name"]</a></li>
                    <li>List</li>
                </ul>
            </div>
            <div class="col-lg-3" style="display:flex;align-items:end;justify-content:end;">
                @using (Html.BeginForm("ListProject", "Useradminmapping", FormMethod.Get, new { id = "searchForm" }))
                {
                    <input type="text" id="searchPharse" name="searchPharse" class="inputcustom" placeholder="Search" autocomplete="off" value="@Request["searchPharse"]" style="margin-top:3px; padding-right: 40px;width:100%;" />
                }

            </div>

        </div>

        <div class="table mt-3 ms-1 me-5" id="ticketTable1">
            <form method="get" action="/Useradminmapping/CheckedValueProject">
                @if (Model != null)
                {
                    @Html.Grid(Model).Columns(columns =>
               {

                   columns.Add(c => c.USERSELECTED)
        .Titled("Select All &nbsp;&nbsp;  <input type='checkbox' id='selectAll' />") // "Select All" checkbox in the header
        .Encoded(false)
        .Sanitized(false)
        .RenderValueAs(o =>
        {
            var index = Model.ToList().IndexOf(o);
            var isChecked = o.USERSELECTED ? "checked" : "";
            var checkboxHtml = $"<input type='checkbox' name='selectedItems[{index}].USERSELECTED' value='true' class='select-item' {isChecked} />";
            var hiddenRecId = $"<input type='hidden' name='selectedItems[{index}].P_PROJECTRECID' value='{o.P_PROJECTRECID}' />"; // Bind GL_RECID properly
            return MvcHtmlString.Create(checkboxHtml + hiddenRecId); // Return the HTML
        })
        .SetWidth("50px");
                   columns.Add(c => c.P_NAME).Titled("Project Name");
                   columns.Add(c => c.P_SORTORDER).Titled("Sort");
                  
               }).WithPaging(10)
                }
                else
                {
                    <div class="alert alert-warning text-center">
                        <b>No Projects's' are available</b>
                    </div>}


                <div class="button-container d-flex justify-content-end mt-3">
                    <input type="submit" id="submitButton" value="Save" class="btn btn-default1 me-2 text-white" tabindex="8" />
                    <input type="button" class="btn btn-default2 text-white" tabindex="9"
                           onclick="window.location.href='@Url.Action("List", "UserLogin", new { })'"
                           value="Cancel" />
                </div>
            </form>
        </div>

    </div>


    <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel" style="height: 150px;">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title text-align-center" id="offcanvasBottomLabel"></h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body d-flex flex-column justify-content-center align-items-center">
            <h4>Are you sure you want to log out?</h4>
        </div>
        <div class="offcanvas-footer d-flex justify-content-center">
            <input type="button" class="btncolorsubmit me-3" id="confirmLogoutBtn" value="Confirm" tabindex="1">
            <input type="button" class="btncolorcancel" data-bs-dismiss="offcanvas" value="Cancel" tabindex="2">
        </div>
    </div>
    <div id="preloader2"></div>
    <!-- LogOut JS -->
    <script src="~/Scripts/Logoutjs.js"></script>



    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    document.getElementById("logoutLink").addEventListener("click", function () {
        Swal.fire({
            title: "Are you sure you want to log out?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Confirm",
            cancelButtonText: "Cancel",
            confirmButtonColor: "#28a745",
            cancelButtonColor: "#dc3545",
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("Logout", "Login")';
            }
        });
    });
    </script>

    <script src="~/Scripts/Fordelete.js"></script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Select/Deselect all checkboxes
            $('#selectAll').click(function () {
                var isChecked = $(this).is(':checked');
                console.log(isChecked);
                $('input[name^="selectedItems"][type="checkbox"]').prop('checked', isChecked);
            });

            // Debug form data
            $('form').submit(function (event) {
                event.preventDefault();
                var formData = new FormData(this);
                var object = {};
                formData.forEach((value, key) => {
                    if (object[key]) {
                        if (!Array.isArray(object[key])) {
                            object[key] = [object[key]];
                        }
                        object[key].push(value);
                    } else {
                        object[key] = value;
                    }
                });
                console.log(object); // Log form data to the console
                this.submit(); // Submit the form after debugging
            });
        });
    </script>
    <script>
    $(document).ready(function () {
        // Initially disable the submit button
        toggleSubmitButton();

        // Select/Deselect all checkboxes
        $('#selectAll').click(function () {
            var isChecked = $(this).is(':checked');
            $('input[name^="selectedItems"][type="checkbox"]').prop('checked', isChecked);
            toggleSubmitButton(); // Update button state
        });

        // Event for individual checkbox selection
        $('input[name^="selectedItems"][type="checkbox"]').change(function () {
            toggleSubmitButton(); // Update button state
        });

        // Handle submit button click
        $('#submitButton').click(function (event) {
            event.preventDefault(); // Prevent the default form submission

            updateSecondGrid(); // Call the function to gather selected IDs and send them to the server
        });

        // Function to enable/disable submit button based on selection
        function toggleSubmitButton() {
            let anyChecked = $('input[name^="selectedItems"][type="checkbox"]:checked').length > 0;
            $('#submitButton').prop('disabled', !anyChecked);
        }

        function updateSecondGrid() {
            let selectedIds = [];

            // Loop through all checked checkboxes
            $('input[name^="selectedItems"][type="checkbox"]:checked').each(function () {
                let index = $(this).attr('name').match(/\d+/)[0]; // Get index from name attribute

                // Get the corresponding hidden input value using the same index
                let userId = $('input[name="selectedItems[' + index + '].P_PROJECTRECID"]').val();

                if (userId) {
                    selectedIds.push(userId); // Push to array
                }
            });

            console.log("selectedIds", selectedIds);

            // Send to controller via AJAX
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CheckedValueProject", "Useradminmapping")',
                data: JSON.stringify({ selectedItems: selectedIds }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (response) {
                    Swal.fire({
                        title: response.success ? 'Success!' : 'Error!',
                        text: response.message,
                        icon: response.success ? 'success' : 'error',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        if (response.success) {
                            window.location.href = '@Url.Action("List", "UserLogin", new { id = Session["CompanyID"] })';
                        }
                    });
                },
                error: function () {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Something went wrong while processing your request.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }
    });
    </script>


</body>
</html>


