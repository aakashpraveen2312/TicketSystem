@model PSS_CMS.Models.Contract
@using GridMvc.Html
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <link href="~/assets/img/bexlogo_wob.png" rel="icon">
    <link href="~/assets/img/bexlogo_wob.png" rel="apple-touch-icon">
    <title>BEYONDEXS - SERVICE MANAGEMENT</title>
    <link href="~/Content/FooterResponsive.css" rel="stylesheet" />
    <link href="~/Content/ClientSide.css" rel="stylesheet" />
    <link href="~/Content/Style1.css" rel="stylesheet" />
    <link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/jquery-1.9.1.min.js")"></script>
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>

    @*Bootstrap Icons and Boxicons*@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>
    <script src="~/Scripts/Sidebarscript.js"></script>
    <link href="~/Content/Responsive.css" rel="stylesheet" />
    <link href="~/Content/SideMenu.css" rel="stylesheet" />
    <link href="~/Content/Colors.css" rel="stylesheet" />

    <style>


        .swal-btn-continue {
            background-color: #6ed3d0 !important;
            color: white !important;
            border-radius: 5px;
            padding: 8px 20px;
            font-weight: bold;
        }
    </style>
</head>

<body>
    @*Sidebar*@
    <nav class="sidebar close">
        <header>
            <div class="text logo-text" style="display:inline-block">

                <a href="@Url.Action("ContractDashboard", "Contract")">


                    @if (Session["Logo"] != null)
                    {
                        <img src="data:image/png;base64,@Session["Logo"]" alt="PSS Logo" class="logo" />
                    }

                </a>


            </div>

            <i class="bx bx-chevron-right toggle" style="margin-right:28px;margin-top:16px;"></i>

        </header>
        <div class="menu-bar">
            <div class="menu">
                <ul class="menu-links" style="margin-left:20px">
                    <!-- ACCOUNTS ADMIN -->
                    <li class="nav-link openfold" style="margin-top:10px;">
                        <img src="~/assets/img/software-engineer.png" class="settingsIcon" style="width: 25px; height: 25px; margin-bottom: 10px;" />
                        <img src="~/assets/img/software-engineer.png" class="openIcon" style="display: none; width: 25px; height: 25px; margin-bottom: 10px;" />
                        <span class="text nav-text" style="margin-left:15px">ACCOUNTS ADMIN</span>
                    </li>
                    <!-- Customer Accounts -->
                    <li class="nav-link">
                        <a href="@Url.Action("CustomerList", "Contract")">
                            <i class='bx bxs-file' style="font-size:20px"></i>
                            <span class="text nav-text" style="margin-left:15px">User Accounts</span>
                        </a>
                    </li>

                    <li class="nav-link">
                        <a href="@Url.Action("List", "AccountantCustomerInvoice")">
                            <i class='bi bi-bag-check' style="font-size:20px"></i>
                            <span class="text nav-text" style="margin-left:15px">Customer Invoice</span>
                        </a>
                    </li>

                    <!-- Settings Section -->
                    <li class="nav-link openfold" style="margin-top:10px;">
                        <img src="~/assets/img/cyber-security.png" class="settingsIcon" style="width: 25px; height: 25px; margin-bottom: 5px;" />
                        <img src="~/assets/img/cyber-security.png" class="openIcon" style="display: none; width: 25px; height: 25px; margin-bottom: 5px;" />
                        <span class="text nav-text" style="margin-left:15px">SECURITY</span>
                    </li>

                    @*Change Password*@
                    <li class="nav-link">
                        <a href="@Url.Action("ChangePassword", "Contract")">
                            <i class='bx bxs-key' style="font-size:24px"></i>
                            <span class="text nav-text" style="margin-left:15px">Change Password</span>
                        </a>
                    </li>
                    <!-- Logout -->
                    <li class="nav-link">
                        <a href="@Url.Action("Index", "Login")" class="logout-trigger login-link text-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="Logout">
                            <i class='bx bx-log-out' style="font-size:24px"></i>
                            <span class="text nav-text" style="margin-left:15px">Logout</span>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="content" style=" overflow-x: hidden!important;">
        <nav class="nav d-flex">
            <div class="p-2 flex-grow-1"> <h3 style="margin-top:10px" class="heading ms-3 adminheadinres">SERVICE MANAGEMENT</h3></div>
            <div class="p-2" style="margin-right:10px"><h4 class="heading adminlogoutres">@Session["UserName"].ToString().ToUpper() - @Session["Role"]</h4></div>
            <div class="p-2 me-3 logout" style="margin-right:10px" data-toggle="tooltip" data-placement="bottom" title="Log out">
                <a href="@Url.Action("Logout", "Login")" class="text-decoration-none" id="logoutlink" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom">
                    <i class='bx bx-log-out' style="font-size:24px;color:red !important;" id="logoutresiconadmin"></i>
                </a>
            </div>

        </nav>
        <div class="row" style="margin-top:10px">
            <div class="col-lg-12">
                <ul class="breadcrumb mt-1" style="margin-bottom:0px!important">
                    <li>USER</li>
                    <li class="" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("CustomerList", "Contract")">LIST</a></li>
                    <li class="resadminwhitepaper" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("ContractList", "Contract")">CONTRACT LIST</a></li>
                    <li class="" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("ContractList", "Contract")">@Session["Name"].ToString().ToUpper()</a></li>
                    <li>EDIT</li>
                </ul>
            </div>
        </div>


        @using (Html.BeginForm("EditContract", "Contract", FormMethod.Post, new { id = "editform", enctype = "multipart/form-data" }))
        {
            <div class="create ms-4 me-2 mt-3">
                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_CONTRACTREFERENCENUMBER, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_CONTRACTREFERENCENUMBER, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_FROMDATE, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_FROMDATE, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", type = "date" } })

                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_TODATE, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_TODATE, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", type = "date" } })

                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_CONTRACTAMOUNT, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_CONTRACTAMOUNT, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", type = "text" } })

                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_TOTALPAIDAMOUNT, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_TOTALPAIDAMOUNT, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", type = "text", @readonly = "true" } })
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_CONTRACTCREATEDBY, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_CONTRACTCREATEDBY, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })

                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_CONTRACTAPPROVEDBY, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_CONTRACTAPPROVEDBY, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })

                    </div>
                </div>


                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_CONTRACTAPPROVEDDATE, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_CONTRACTAPPROVEDDATE, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", type = "date" } })

                    </div>
                </div>


                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_ANYREFERENCE, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_ANYREFERENCE, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off" } })

                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-lg-2 col-md-2 col-sm-12">
                        @Html.LabelFor(model => model.CT_SORTORDER, new { @class = "labels" })
                    </div>
                    <div class="col-lg-3 col-md-3 col-sm-12">
                        @Html.EditorFor(model => model.CT_SORTORDER, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", type = "text" } })
                    </div>
                </div>

                <div class="row mb-5 ">
                    <div class="col-lg-2">

                    </div>
                    <div class="col-lg-3 d-flex justify-content-end">
                        <input type="submit" value="Save" class="submitbuttons me-3" tabindex="" id="bt" />
                        <input type="button" value="Cancel" class="cancelbuttons" tabindex="" id="" onclick="window.location.href='@Url.Action("ContractList", "Contract", new { })'" />
                    </div>
                </div>
            </div>
        }


        <footer>
            <div class="footer">
                <div class="flex-container" style="padding-top:5px;padding-left:5px">

                    <div class="flex-item">
                        <div class="d-flex justify-content-center footerb">
                            <span class="minicheck minicheck1"></span>
                            - Text Fields
                        </div>
                    </div>

                    <div class="flex-item">
                        <div class="d-flex justify-content-center footerb">
                            <span class="minicheck minicheck2"></span>
                            - Number Fields
                        </div>
                    </div>

                </div>
            </div>
        </footer>

    </div>


    <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel" style="height: 150px;">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title text-align-center" id="offcanvasBottomLabel"></h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body d-flex flex-column justify-content-center align-items-center">
            <h4>Are you sure you want to log out?</h4>
        </div>
        <div class="offcanvas-footer d-flex justify-content-center">
            <input type="button" class="btncolorsubmit me-3" id="confirmLogoutBtn" value="Confirm" tabindex="1">
            <input type="button" class="btncolorcancel" data-bs-dismiss="offcanvas" value="Cancel" tabindex="2">
        </div>
    </div>
    <div id="preloader2"></div>
    <!-- LogOut JS -->
    <script src="~/Scripts/Logoutjs.js"></script>


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    document.getElementById("logoutLink").addEventListener("click", function () {
        Swal.fire({
            title: "Are you sure you want to log out?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Confirm",
            cancelButtonText: "Cancel",
            confirmButtonColor: "#28a745",
            cancelButtonColor: "#dc3545",
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("Logout", "Login")';
            }
        });
    });
    </script>
    @*Toastr for created succesfully*@
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- jQuery CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
    $(document).ready(function () {
        $("#editform").submit(function (event) {
            event.preventDefault();

            var submitBtn = $("#savebutton");
            submitBtn.prop("disabled", true);

            var formData = new FormData(this);

            // 🔹 Show SweetAlert loading dialog
            Swal.fire({
                title: "Processing...",
                html: "Please wait while we save your changes.",
                allowOutsideClick: false,
                allowEscapeKey: false,
                didOpen: () => {
                    Swal.showLoading(); // show spinner
                }
            });

            // Disable page interaction
            $("body").css("pointer-events", "none");

            $.ajax({
                url: '@Url.Action("EditContract", "Contract")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: "Success!",
                            text: response.message,
                            icon: "success",
                            confirmButtonText: "Ok",
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            customClass: {
                                confirmButton: "swal-btn-continue",
                            },
                            didOpen: () => {
                                $(".swal2-container").css("pointer-events", "auto");
                            }
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '@Url.Action("ContractList", "Contract", new { CompanyRecID = Session["CompanyID"] })';
                            } else {
                                 window.location.href = '@Url.Action("CustomerList", "Contract")';
                            }
                        });
                    } else {
                        Swal.fire({
                            title: "Error!",
                            text: response.message,
                            icon: "error",
                            allowOutsideClick: false,
                            allowEscapeKey: false
                        });
                        resetButton();
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Error!",
                        text: "An unexpected error occurred.",
                        icon: "error",
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    });
                    resetButton();
                }
            });
        });

        function resetButton() {
            $("#savebutton").prop("disabled", false).text("Submit");
            $("body").css("pointer-events", "auto");
        }
    });
    </script>
    <script>
        function showTab(index) {
            const contents = document.querySelectorAll('.tab-content');
            const buttons = document.querySelectorAll('.tab-buttons button');

            contents.forEach(c => c.classList.remove('active'));
            buttons.forEach(b => b.classList.remove('active'));

            contents[index].classList.add('active');
            buttons[index].classList.add('active');
        }
    </script>

</body>
</html>


