@model PSS_CMS.Models.Materialconsumption
@using GridMvc.Html
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <link href="~/Content/FooterResponsive.css" rel="stylesheet" />
    <link href="~/Content/ClientSide.css" rel="stylesheet" />
    <link href="~/Content/Style1.css" rel="stylesheet" />
    <link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/jquery-1.9.1.min.js")"></script>
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>

    @*Bootstrap Icons and Boxicons*@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>
    <script src="~/Scripts/Script.js"></script>
    <link href="~/Content/Responsive.css" rel="stylesheet" />
    <link href="~/Content/Colors.css" rel="stylesheet" />
    <link href="~/Content/SideMenu.css" rel="stylesheet" />
    <style>
        .swal-btn-continue {
            background-color: #6ed3d0 !important;
            color: white !important;
            border-radius: 5px;
            padding: 8px 20px;
            font-weight: bold;
        }

        .swal-btn-back {
            background-color: #f0a72d !important;
            color: white !important;
            border-radius: 5px;
            padding: 8px 20px;
            font-weight: bold;
        }

 select#MATERIAL {
            display: block;
            width: 100%;
            height: 34px;
            padding: 6px 12px;
            font-size: 14px;
            line-height: 1.42857143;
            color: #555;
            background-image: none;
            border: 1px solid #ccc;
            border-radius: 4px;
            -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            -webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
        }
        select#SelectedCategory, select#MaterialDropdown {
            font-size: 15px;
        }


    </style>
</head>

<body>

    <div class="content" style=" overflow-x: hidden!important;">
        <nav class="nav d-flex">
            <div class="p-2 flex-grow-1"> <h3 style="margin-top:10px" class="heading ms-3 adminheadinres">TICKET SYSTEM</h3></div>
            <div class="p-2" style="margin-right:10px"><h4 class="heading adminlogoutres">@Session["UserName"].ToString().ToUpper()</h4></div>
            <div class="p-2 me-3 logout" style="margin-right:10px" data-toggle="tooltip" data-placement="bottom" title="Log out">
                <a href="@Url.Action("Logout", "Login")" class="text-decoration-none" id="logoutlink" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasBottom" aria-controls="offcanvasBottom">
                    <i class='bx bx-log-out' style="font-size:24px;color:red !important;" id="logoutresiconadmin"></i>
                </a>
            </div>

        </nav>
        <div class="row" style="margin-top:10px">
            <div class="col-lg-12">
                <ul class="breadcrumb mt-1" style="margin-bottom:0px!important">
                    <li class="" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("RecentTicket", "RecentTickets")">TICKETS</a></li>
                    <li>LINE ITEM</li>
                    <li class="" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("List", "MaterialConsumption")">@Session["Type"].ToString().ToUpper()</a></li>
                    <li class="" style="color: #2888bb;text-decoration:none"><a href="@Url.Action("List", "MaterialConsumption")">LIST</a></li>
                    <li>CREATE</li>
                </ul>
            </div>
        </div>
        @using (Html.BeginForm("Create", "MaterialConsumption", FormMethod.Post, new { id = "createform", enctype = "multipart/form-data" }))
        {


    <div class="create ms-4 me-2 mt-3">
        <div class="row mb-3">
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.MATERIALCATEGORY, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @if (ViewBag.MaterialCategory != null)
                {
                    var MaterialCategoryList = ViewBag.MaterialCategory as IEnumerable<SelectListItem>;

                    if (MaterialCategoryList != null && MaterialCategoryList.Any())
                    {
                        var modifiedMaterialCategoryList = new List<SelectListItem>(MaterialCategoryList);

                        if (MaterialCategoryList.Count() > 1)
                        {
                            modifiedMaterialCategoryList.Insert(0, new SelectListItem { Text = "Select Item Category", Value = "" });
                        }

                        @Html.DropDownList("SelectedCategory",
                                           modifiedMaterialCategoryList,
                                           new { @class = "form-select textboxcolors", required = "required", onchange = "loadMaterials(this.value)" })
                    }
                    else
                    {
                        var modifiedMaterialCategoryList = new List<SelectListItem>();
                        modifiedMaterialCategoryList.Insert(0, new SelectListItem { Text = "No Item Category's are available", Value = "" });

                        @Html.DropDownList("SelectedCategory",
                                           modifiedMaterialCategoryList,
                                           new { @class = "form-select textboxcolors" })
                    }
                }
                else
                {
                    <p>No Item Category's are available</p>
                }
            </div>
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.MATERIAL, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.DropDownList("SelectedMaterial",
                    new List<SelectListItem> {
                        new SelectListItem { Text = "No Item Category is selected", Value = "" }
                    },
                    new { @class = "form-select textboxcolors", id = "MaterialDropdown" })

            </div>
        </div>
        <div class="row mb-3">
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_UOM, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_UOM, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", @readonly = "readonly" } })

            </div>
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_QUANTITY, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_QUANTITY, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", oninput = "Netamount()" } })

            </div>
        </div>


        <div class="row mb-3">
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_PRICE, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_PRICE, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", @readonly = "readonly" } })

            </div>
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_DISCOUNT, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_DISCOUNT, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", oninput = "Netamount()" } })

            </div>
        </div>

        <div class="row mb-3">
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_SGST, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_SGST, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", @readonly = "readonly" } })

            </div>
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_CGST, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_CGST, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", @readonly = "readonly" } })

            </div>
        </div>

        <div class="row mb-3">
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_TOTALAMOUNT, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_TOTALAMOUNT, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", @readonly = "readonly" } })

            </div>
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_NETAMOUNT, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_NETAMOUNT, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off", @readonly = "readonly" } })

            </div>
        </div>

        <div class="row mb-3">
            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_TYPE, new { @class = "labels" })

            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_TYPE, new { htmlAttributes = new { @class = "form-control textboxcolors", autocomplete = "off", @readonly = "readonly" } })

            </div>

            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.tM_SORTORDER, new { @class = "labels" })

            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.EditorFor(model => model.tM_SORTORDER, new { htmlAttributes = new { @class = "form-control integerboxcolors", autocomplete = "off" } })

            </div>
        </div>
        <div class="row mb-3">
            <div class="col-lg-2 col-md-2 col-sm-12">
              

            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">

            </div>

            <div class="col-lg-2 col-md-2 col-sm-12">
                @Html.LabelFor(model => model.IsDisable, new { @class = "labels" })
            </div>
            <div class="col-lg-3 col-md-3 col-sm-12">
                @Html.CheckBoxFor(model => model.IsDisable, new { @class = "form-check-input" })
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-lg-2">

            </div>
            <div class="col-lg-3 d-flex justify-content-end">

            </div>
            <div class="col-lg-2">

            </div>
            <div class="col-lg-3 d-flex justify-content-end">
                <input type="submit" value="Save" class="submitbuttons me-3" tabindex="" id="savebutton" />
                <input type="button" value="Cancel" class="cancelbuttons" tabindex="" id="" onclick="window.location.href='@Url.Action("List", "MaterialConsumption", new { })'" />
            </div>
        </div>
    </div>

        }
        <footer>
            <div class="footer">
                <div class="flex-container" style="padding-top:5px;padding-left:5px">

                    <div class="flex-item">
                        <div class="d-flex justify-content-center footerb">
                            <span class="minicheck minicheck1"></span>
                            - Text Fields
                        </div>
                    </div>

                    <div class="flex-item">
                        <div class="d-flex justify-content-center footerb">
                            <span class="minicheck minicheck2"></span>
                            - Number Fields
                        </div>
                    </div>
                    <div class="flex-item">
                        <div class="d-flex justify-content-center footerb">
                            <span class="minicheck minicheck3"></span>
                            - Read Only
                        </div>
                    </div>
                </div>
            </div>
        </footer>

    </div>


    <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel" style="height: 150px;">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title text-align-center" id="offcanvasBottomLabel"></h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body d-flex flex-column justify-content-center align-items-center">
            <h4>Are you sure you want to log out?</h4>
        </div>
        <div class="offcanvas-footer d-flex justify-content-center">
            <input type="button" class="btncolorsubmit me-3" id="confirmLogoutBtn" value="Confirm" tabindex="1">
            <input type="button" class="btncolorcancel" data-bs-dismiss="offcanvas" value="Cancel" tabindex="2">
        </div>
    </div>
    <div id="preloader2"></div>
    <!-- LogOut JS -->
    <script src="~/Scripts/Logoutjs.js"></script>


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    @*Logout Pronptbox script*@
    <script>
    document.getElementById("logoutLink").addEventListener("click", function () {
        Swal.fire({
            title: "Are you sure you want to log out?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Confirm",
            cancelButtonText: "Cancel",
            confirmButtonColor: "#28a745",
            cancelButtonColor: "#dc3545",
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '@Url.Action("Logout", "Login")';
            }
        });
    });
    </script>

    @*Toastr for created succesfully*@
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- jQuery CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
    $(document).ready(function () {
        $("#createform").submit(function (event) {
            event.preventDefault();

            var submitBtn = $("#savebutton");
            submitBtn.prop("disabled", true).text("Submitting...");

            var formData = new FormData(this);

            // Disable page interaction
            $("body").css("pointer-events", "none");

            $.ajax({
                url: '@Url.Action("Create", "MaterialConsumption")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: "Success!",
                            text: response.message,
                            icon: "success",
                            showCancelButton: true,
                            confirmButtonText: "Continue",
                            cancelButtonText: "Back to List",
                            allowOutsideClick: false, // Prevent closing by clicking outside
                            allowEscapeKey: false, // Prevent closing using Esc key
                            customClass: {
                                confirmButton: "swal-btn-continue",
                                cancelButton: "swal-btn-back"
                            },
                            didOpen: () => {
                                // Allow interaction inside the alert only
                                $(".swal2-container").css("pointer-events", "auto");
                            }
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            } else {
                                window.location.href = '@Url.Action("List", "MaterialConsumption")';
                            }
                        });
                    } else {
                        Swal.fire({
                            title: "Error!",
                            text: response.message,
                            icon: "error",
                            allowOutsideClick: false,
                            allowEscapeKey: false
                        });
                        resetButton();
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Error!",
                        text: "An unexpected error occurred.",
                        icon: "error",
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    });
                    resetButton();
                }
            });
        });

        function resetButton() {
            $("#savebutton").prop("disabled", false).text("Submit");
            $("body").css("pointer-events", "auto"); // Re-enable page interaction
        }
    });
    </script>

    <!-- Loadin of material and display the values in the Input box -->
    <script>
    function loadMaterials(selectedRecId) {
        $.ajax({
            url: '@Url.Action("ComboMaterial", "MaterialConsumption")',
            type: 'GET',
            data: { Recid: selectedRecId },
            success: function (response) {
                $('#MaterialDropdown').empty();
                window.materialList = response; // Store globally if needed elsewhere

                if (response.error) {
                    alert(response.error);
                    $('#MaterialDropdown').append($('<option>', {
                        value: '',
                        text: 'Error: ' + response.error
                    }));
                    clearMaterialFields();
                    return;
                }

                if (response.length > 0) {
                    $.each(response, function (i, item) {
                        $('#MaterialDropdown').append($('<option>', {
                            value: item.M_RECID,
                            text: item.M_NAME
                        }));
                    });

                    const selectedMaterial = response[0];
                    $('#MaterialDropdown').val(selectedMaterial.M_RECID); // Select first item
                    fillMaterialFields(selectedMaterial);
                } else {
                    $('#MaterialDropdown').append($('<option>', {
                        value: '',
                        text: 'No line items available'
                    }));
                    clearMaterialFields();
                }
            },
            error: function () {
                alert('Failed to load materials.');
            }
        });
    }

    function fillMaterialFields(material) {
        $('#tM_UOM').val(material.M_UOM);
        $('#tM_TYPE').val(material.M_TYPE);
        $('#tM_QUANTITY').val(material.M_QUANTITY);
        $('#tM_PRICE').val(material.M_PRICE);
        $('#tM_DISCOUNT').val(material.M_DISCOUNT);
        $('#tM_TOTALAMOUNT').val(material.M_TOTALAMOUNT);
        $('#tM_CGST').val(material.M_CGST);
        $('#tM_SGST').val(material.M_SGST);
        $('#tM_NETAMOUNT').val(material.M_NETAMOUNT);
    }

    function clearMaterialFields() {
        $('#tM_UOM, #tM_QUANTITY, #tM_PRICE, #tM_DISCOUNT, #tM_TOTALAMOUNT, #tM_CGST, #tM_SGST, #tM_NETAMOUNT').val('');
    }

    // Handle dropdown change
    $(document).on('change', '#MaterialDropdown', function () {
        const selectedRecId = $(this).val();
        const selectedMaterial = window.materialList.find(x => x.M_RECID == selectedRecId);
        if (selectedMaterial) {
            fillMaterialFields(selectedMaterial);
        } else {
            clearMaterialFields();
        }
    });
    </script>

    <!-- Net Amount Calculation -->
    <script>
        function Netamount() {
            /* Total Amount and Discount */
            var price = document.getElementById("tM_PRICE").value;
            var quantity = document.getElementById("tM_QUANTITY").value;
            var discount = document.getElementById("tM_DISCOUNT").value;

            var TotalAmount = (price * quantity) * (1 - discount / 100)
            document.getElementById("tM_TOTALAMOUNT").value = TotalAmount;

            /*SGST and CGST*/

            var SGST = document.getElementById("tM_SGST").value;
            var SGSTamount = TotalAmount * SGST / 100;

            var CGST = document.getElementById("tM_CGST").value;
            var CGSTamount = TotalAmount * CGST / 100;

            /* Net Amount*/

            var NetAmount = TotalAmount + SGSTamount + CGSTamount
            Totalnetamount = parseFloat(NetAmount).toFixed(3);
            document.getElementById("tM_NETAMOUNT").value = Totalnetamount;
        }
    </script>


</body>
</html>


